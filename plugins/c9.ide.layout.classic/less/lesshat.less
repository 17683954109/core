//  LESS Hat 1.1.2
//  LESSHat.com
//  From creators of CSSHat.com
//  2012
//  Petr Brzek & Jan Kuca


//  @GlobalConfig

//  @GlobalConfig

  // Config supported browsers for your project

    @w3c: true; // Unprefixed W3C syntax
    @webkit: true; // Chrome 7+, Safari 5+, iOS5, Android
    @moz: true; //  Firefox 4+
    @opera: true; // Opera 10.5+
    @ms: true;  // IE 10+

  // Signals

    @webkitSignal: 1;
    @mozSignal: 2;
    @operaSignal: 3;
    @msSignal: 4;
    @w3cSignal: 5;




//  .size

  .size(@square){
    width: @square;
    height: @square;
  }

  .size(@width, @height){
    width: @width;
    height: @height;
  }

    //  element{ .size(10px); } // render width:10px; height:10px;
    //  element{ .size(10px, 20px); } // render width:10px; height: 20px;



//  .user-select

  .user-select(@arguments:auto){

      //  Local config for disabling properties

      @webkitLocal: true; // Chrome 7+, Safari 5+, iOS5, Android
      @mozLocal: true; //  Firefox 4+
      @msLocal: true;  // IE 10+

      .result (@arguments, @signal, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) {
        .inception (@signal, @arguments) when (@signal = 1) { -webkit-user-select: @arguments; }
        .inception (@signal, @arguments) when (@signal = 2) { -moz-user-select: @arguments; }
        .inception (@signal, @arguments) when (@signal = 4) { -ms-user-select: @arguments; }
        .inception (@signal, @arguments) when (@signal > 5),(@signal < 1) { error: "Signal is out of range"; }
        .inception(@signal, @arguments);
      }
      .result (@arguments, @signal, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }

      .result(@arguments, @webkitSignal, @webkit, @webkitLocal);
      // --  this comment must be here because of LESS bug
      .result(@arguments, @mozSignal, @moz, @mozLocal);
      // --
      .result(@arguments, @msSignal, @ms, @msLocal);
  }

   //   element{ .user-select(text); }



.font-smoothing(@state){
    .font-smoothing(@state) when (@state = true) {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    .font-smoothing(@state) when (@state = false) {
        -webkit-font-smoothing: auto;
        -moz-osx-font-smoothing: auto;
    }
    .font-smoothing(@state);
}

.image-2x(@image; @width; @height; @repeat: no-repeat; @important: false) {
    @filename  : ~`/(.*)\.(jpg|jpeg|png|gif)|$/.exec(@{image})[1] || ""`;
    @extension : ~`/(.*)\.(jpg|jpeg|png|gif)|$/.exec(@{image})[2] || ""`;
    background-image: ~`(function(){ return "url(@{filename}.@{extension})" + ("@{important}" == "true" ? ' !important' : '');})()`;
    background-repeat: @repeat;

    @media print, (-webkit-min-device-pixel-ratio: 1.25), (min-resolution: 1.25dppx) {
        background-image: ~`(function(){ return "url(@{filename}@2x.@{extension})" + ("@{important}" == "true" ? ' !important' : '');})()`;
        background-size: ~`(function(){ return "@{width} @{height}" + ("@{important}" == "true" ? ' !important' : '');})()`;
    }
}
.display(@state){
    .display(@state) when (@state = true) {
        display: block;
    }
    .display(@state) when (@state = false) {
        display: none;
    }
    .display(@state);
}